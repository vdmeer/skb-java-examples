<?xml version="1.0" encoding="UTF-8"?>
<project name="common-common" xmlns:ivy="antlib:org.apache.ivy.ant">

	<tstamp>
		<format property="timestamp" pattern="yyyyMMddHHmmss" timezone="GMT"/>
	</tstamp>

	<!-- Properties -->
	<dirname property="buildsystem.home.dir" file="${ant.file.common-common}/.."/>
	<property environment="env"/>
	<property file="${buildsystem.home.dir}/common/common.properties"/>

	<!-- Global tasks -->
	<condition property="adjusted.release.type" value="snapshot" else="${release.type}">
		<equals arg1="integration" arg2="${release.type}"/>
	</condition>

	<condition property="publication.resolver.prefix" value="local" else="ebr">
		<istrue value="${local.build}"/>
	</condition>

	<!-- Main targets -->
	<target name="clean" description="Removes the target directory (common).">
		<delete quiet="true" dir="${target.dir}"/>
	</target>

	<target name="clean-integration" description="Removes the integration repository directory (common).">
		<fail message="The 'integration.repo.dir' property must be set on this project.">
			<condition>
				<not>
					<isset property="integration.repo.dir"/>
				</not>
			</condition>
		</fail>
		<delete quiet="true" dir="${integration.repo.dir}"/>
	</target>

	<target name="clean-ivy" description="Removes the ivy cache directory (common).">
		<fail message="The 'ivy.cache.dir' property must be set on this project.">
			<condition>
				<not>
					<isset property="ivy.cache.dir"/>
				</not>
			</condition>
		</fail>
		<delete quiet="true" dir="${ivy.cache.dir}"/>
	</target>

	<target name="resolve" depends="resolve.init" description="Retrieves all external dependencies for this project (common).">
		<ivy:resolve id="all.classpath" log="download-only"/>
	</target>

	<!-- Other targets -->
	<target name="ivy.init" unless="ivy.initialized">
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
			<classpath>
<!--
				<path location="${ivy.lib.dir}/ivy.jar"/>
				<path location="${ivy.lib.dir}"/>
-->
			</classpath>
		</taskdef>
		<ivy:settings file="${ivy.settings.file}"/>
		<property name="ivy.initialized" value="true"/>
	</target>


	<!-- Generate Eclipse .classpath file from ivy dependencies -->
	<target name="eclipse" description="Updates eclipse classpath (common)." depends="ivy.init">
		<!-- <ivy:configure settingsId="ivy.eclipse" override="true" /> 
		<ivy:resolve settingsRef="ivy.eclipse" conf="compile, references" />
		<ivy:eclipse settingsRef="ivy.eclipse" conf="compile, references" /> -->
		<ivy:resolve conf="test" />
		<ivy:eclipse conf="test" />
	</target>

	<target name="resolve.init" depends="ivy.file.exists">
		<fail message="Dependency resolution requires an ${ivy.file} file to exist.">
			<condition>
				<not>
					<isset property="ivy.file.exists"/>
				</not>
			</condition>
		</fail>
	</target>

	<target name="ivy.file.exists" depends="ivy.init">
		 <condition property="ivy.file.exists">
			<available file="${ivy.file}"/>
		</condition>
	</target>

	<target name="resolve.compile" depends="resolve.init">
		<ivy:cachepath resolveId="compile.classpath" pathid="compile.classpath" conf="compile,optional,provided,dm-server-provided" type="jar" log="download-only"/>
	</target>

	<target name="resolve.test" depends="resolve.init, resolve.compile">
		<ivy:cachepath resolveId="test.classpath" pathid="test.classpath" conf="test" type="jar" log="download-only"/>
		<ivy:cachepath resolveId="runtime.classpath" pathid="runtime.classpath" conf="runtime" type="jar" log="download-only"/>
	</target>

	<target name="resolve.aspects" depends="resolve.init">
		<ivy:cachepath resolveId="aspects.classpath" pathid="aspects.classpath" conf="aspects" type="jar" log="download-only"/>
	</target>

	<target name="resolve.external" depends="resolve.init">
		<ivy:cachepath resolveId="external.classpath" pathid="external.classpath" conf="external" type="jar" transitive="false" log="download-only"/>
		<ivy:cachepath resolveId="external.srcpath" pathid="external.srcpath" conf="external" type="src" transitive="false" log="download-only"/>
	</target>

	<target name="src.init">
		<condition property="src.exists">
			<resourcecount when="gt" count="0">
				<fileset dir="${main.java.dir}" erroronmissingdir="false">
					<include name="**/*.java"/>
					<include name="*.java"/>
				</fileset>
			</resourcecount>
		</condition>
	</target>

	<target name="test.init">
		<condition property="test.exists">
			<resourcecount when="gt" count="0">
				<fileset dir="${test.java.dir}" erroronmissingdir="false">
					<include name="**/*.java"/>
					<include name="*.java"/>
				</fileset>
			</resourcecount>
		</condition>
	</target>

	<!-- Macros -->
	<macrodef name="compile">
		<attribute name="classpath.id"/>
		<attribute name="input.dir"/>
		<attribute name="output.dir"/>
		<attribute name="resources.dir"/>
		<sequential>
			<delete quiet="true" dir="@{output.dir}"/>
			<mkdir dir="@{output.dir}"/>
			<pre-compile classpath.id="@{classpath.id}" input.dir="@{input.dir}" output.dir="@{output.dir}" resources.dir="@{resources.dir}"/>
			<do-compile classpath.id="@{classpath.id}" input.dir="@{input.dir}" output.dir="@{output.dir}" resources.dir="@{resources.dir}"/>
			<post-compile classpath.id="@{classpath.id}" input.dir="@{input.dir}" output.dir="@{output.dir}" resources.dir="@{resources.dir}"/>
			<java-doc input.dir="${main.java.dir}" output.dir="${javadoc-bundle.output.dir}" classpath.id="@{classpath.id}" access="public" exclude.package.names="${javadoc.exclude.package.names}"/>
		</sequential>
	</macrodef>

	<macrodef name="test-compile">
		<attribute name="classpath.id"/>
		<attribute name="input.dir"/>
		<attribute name="output.dir"/>
		<attribute name="resources.dir"/>
		<sequential>
			<delete quiet="true" dir="@{output.dir}"/>
			<mkdir dir="@{output.dir}"/>
			<test-pre-compile classpath.id="@{classpath.id}" input.dir="@{input.dir}" output.dir="@{output.dir}" resources.dir="@{resources.dir}"/>
			<do-compile classpath.id="@{classpath.id}" input.dir="@{input.dir}" output.dir="@{output.dir}" resources.dir="@{resources.dir}"/>
			<test-post-compile classpath.id="@{classpath.id}" input.dir="@{input.dir}" output.dir="@{output.dir}" resources.dir="@{resources.dir}"/>
		</sequential>
	</macrodef>

	<macrodef name="pre-compile">
		<attribute name="classpath.id"/>
		<attribute name="input.dir"/>
		<attribute name="output.dir"/>
		<attribute name="resources.dir"/>
		<sequential/>
	</macrodef>

	<macrodef name="post-compile">
		<attribute name="classpath.id"/>
		<attribute name="input.dir"/>
		<attribute name="output.dir"/>
		<attribute name="resources.dir"/>
		<sequential/>
	</macrodef>

	<macrodef name="test-pre-compile">
		<attribute name="classpath.id"/>
		<attribute name="input.dir"/>
		<attribute name="output.dir"/>
		<attribute name="resources.dir"/>
		<sequential/>
	</macrodef>

	<macrodef name="test-post-compile">
		<attribute name="classpath.id"/>
		<attribute name="input.dir"/>
		<attribute name="output.dir"/>
		<attribute name="resources.dir"/>
		<sequential/>
	</macrodef>

	<macrodef name="java-doc">
		<attribute name="input.dir"/>
		<attribute name="output.dir"/>
		<attribute name="classpath.id"/>
		<attribute name="access"/>
		<attribute name="exclude.package.names" default=""/>
		<sequential>
			<delete quiet="true" dir="@{output.dir}"/>
			<mkdir dir="@{output.dir}"/>
			<javadoc.links sourcepath="@{input.dir}" destdir="@{output.dir}" classpathref="@{classpath.id}"
					access="@{access}" excludepackagenames="@{exclude.package.names}" maxmemory="${javadoc.max.memory}"
					stylesheetfile="${javadoc.stylesheet.file}" splitindex="true" useexternalfile="true" encoding="UTF-8" docencoding="UTF-8" charset="UTF-8"
					linksource="no" noqualifier="all">
			</javadoc.links>
			<copy toDir="@{output.dir}/resources">
				<fileset dir="${javadoc.resources.dir}" erroronmissingdir="false"/>
			</copy>
		</sequential>
	</macrodef>

	<presetdef name="javadoc.links">
		<javadoc/>
	</presetdef>

	<macrodef name="asciidoc">
		<attribute name="filename" default=""/>
		<sequential>
			<echo message="Running asciidoc: ${env.ASCII_DOC_EXEC}"/>
			<exec executable="${env.ASCII_DOC_EXEC}">
				<arg line="@{filename}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="dist-text-files">
		<sequential>
			<echo message="Preparing distribution text files: LICENSE, README, CHANGELOG"/>

			<copy file="${package.dist.license.file}" tofile="${main.output.dir}/LICENSE" />

			<copy file="${package.dist.readme.file}.asciidoc" tofile="${main.output.dir}/README" />
			<copy file="${package.dist.readme.file}.html" tofile="${main.output.dir}/README.html" />

			<copy file="${package.dist.changelog.file}.asciidoc" tofile="${main.output.dir}/CHANGELOG" />
			<copy file="${package.dist.changelog.file}.html" tofile="${main.output.dir}/CHANGELOG.html" />
		</sequential>
	</macrodef>

	<macrodef name="create-script">
		<attribute name="template.dir"/>
		<attribute name="template.file.bat" default="bat" />
		<attribute name="template.file.sh" default="sh" />
		<attribute name="dest.file"/>
		<attribute name="dest.dir"/>
		<attribute name="demo.home.dir.dos"/>
		<attribute name="demo.home.dir.cyg"/>
		<attribute name="exec.name" default="" />
		<sequential>
			<copy file="@{template.dir}/@{template.file.bat}.tpl" tofile="@{dest.dir}/bin/bat/@{dest.file}.bat" />	
			<replace file="@{dest.dir}/bin/bat/@{dest.file}.bat" token="##DEMO_HOME##" value="@{demo.home.dir.dos}"/>
			<replace file="@{dest.dir}/bin/bat/@{dest.file}.bat" token="##EXEC_NAME##" value="@{exec.name}"/>
			<replace file="@{dest.dir}/bin/bat/@{dest.file}.bat" token="##RUN_SCRIPT##" value="bat\run.bat"/>
			<replace file="@{dest.dir}/bin/bat/@{dest.file}.bat" token="##DEMO_VAR##" value="%DEMO_HOME%"/>
			<replace file="@{dest.dir}/bin/bat/@{dest.file}.bat" token="##JAVA_CP_SEP##" value=";"/>

			<copy file="@{template.dir}/@{template.file.sh}.tpl" tofile="@{dest.dir}/bin/sh/@{dest.file}.sh" />
			<replace file="@{dest.dir}/bin/sh/@{dest.file}.sh" token="##DEMO_HOME##" value="@{demo.home.dir.cyg}"/>
			<replace file="@{dest.dir}/bin/sh/@{dest.file}.sh" token="##EXEC_NAME##" value="@{exec.name}"/>
			<replace file="@{dest.dir}/bin/sh/@{dest.file}.sh" token="##RUN_SCRIPT##" value="sh/run.sh"/>
			<replace file="@{dest.dir}/bin/sh/@{dest.file}.sh" token="##DEMO_VAR##" value="${DEMO_HOME}"/>
			<replace file="@{dest.dir}/bin/sh/@{dest.file}.sh" token="##JAVA_CP_SEP##" value=":"/>

			<copy file="@{template.dir}/@{template.file.sh}.tpl" tofile="@{dest.dir}/bin/cyg/@{dest.file}.sh" />
			<replace file="@{dest.dir}/bin/cyg/@{dest.file}.sh" token="##DEMO_HOME##" value="@{demo.home.dir.dos}"/>
			<replace file="@{dest.dir}/bin/cyg/@{dest.file}.sh" token="##EXEC_NAME##" value="@{exec.name}"/>
			<replace file="@{dest.dir}/bin/cyg/@{dest.file}.sh" token="##RUN_SCRIPT##" value="cyg/run.sh"/>
			<replace file="@{dest.dir}/bin/cyg/@{dest.file}.sh" token="##DEMO_VAR##" value="${DEMO_HOME}"/>
			<replace file="@{dest.dir}/bin/cyg/@{dest.file}.sh" token="##JAVA_CP_SEP##" value=";"/>
			<replace file="@{dest.dir}/bin/cyg/@{dest.file}.sh" token="${DEMO_HOME}/bin/sh/" value="${DEMO_HOME}/bin/cyg/"/>
		</sequential>
	</macrodef>

</project>
